@inherits ComponentBase
@using AniversarioAlunos.Models

<div class="modal-overlay">
    <div class="modal" style="@ModalStyle">
        <div class="modal-content">
            <div class="">
                <button class="close-btn" @onclick="Close">X</button>
                <h3>@Title</h3>
            </div>
            <EditForm Model="@Aluno" OnValidSubmit="HandleSave">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="nome">Nome Completo:</label>
                    <InputText @bind-Value="Aluno.Nome" />
                    <ValidationMessage For="@(() => Aluno.Nome)" />
                </div>
                <div class="form-group">
                    <label>Data de aniversário:</label>
                    <InputDate @bind-Value="Aluno.DataAniversario" Min="1800-01-01"/>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Salvar</button>
                </div>
            </EditForm>
           </div>
    </div>
</div>

@code {
    [Parameter]
    public Aluno Aluno { get; set; } = new Aluno();

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public string ?Title { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public EventCallback<Aluno> OnConfirm { get; set; }

    [Parameter]
    public object? Model { get; set; }

    [Parameter]
    public string ConfirmButton { get; set; } = "Salvar";

    private string ModalStyle => IsOpen ? "display:block;" : "display:none;";

    private async Task Close()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    private void ConfirmAction()
    {
        OnConfirm.InvokeAsync();
    }

    private async Task HandleSave()
    {
        await OnConfirm.InvokeAsync(Aluno);
        await Close();
    }
}
